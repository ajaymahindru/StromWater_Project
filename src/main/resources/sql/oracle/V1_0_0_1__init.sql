CREATE SEQUENCE  HIBERNATE_SEQUENCE  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;

CREATE TABLE CGP_NOI_FORM_SETS
(
  ID NUMBER(19) PRIMARY KEY NOT NULL,
  MASTER_PERMIT_NUMBER VARCHAR2(255) NOT NULL,
  NPDES_ID VARCHAR2(255) DEFAULT NULL,
  OWNER VARCHAR2(255) NOT NULL
);

CREATE TABLE CGP_NOI_FORM_DATA_INDEX
(
  ID NUMBER(19) PRIMARY KEY NOT NULL,
  OPERATOR_FEDERAL_IND CHAR(1),
  OPERATOR_NAME VARCHAR2(4000),
  SITE_CITY VARCHAR2(255),
  SITE_INDIAN_COUNTRY_IND CHAR(1),
  SITE_INDIAN_COUNTRY_LANDS VARCHAR2(4000),
  SITE_NAME VARCHAR2(255),
  SITE_STATE_CODE VARCHAR2(2),
  SITE_ZIP_CODE VARCHAR2(255),
  PREPARER VARCHAR2(255),
  CERTIFIER VARCHAR2(255)
);

CREATE TABLE CGP_NOI_FORMS
(
  ID NUMBER(19) PRIMARY KEY NOT NULL,
  CERTIFIED_DATE TIMESTAMP(6),
  CREATED_DATE TIMESTAMP(6) NOT NULL,
  CROMERR_ACTIVITY_ID VARCHAR2(255),
  CROMERR_COR_ID VARCHAR2(255),
  FORMDATA BLOB,
  LAST_UPDATED_DATE TIMESTAMP(6),
  NODE_TRANSACTION_ID VARCHAR2(255),
  REVIEW_EXPIRATION_DATE TIMESTAMP(6),
  STATUS VARCHAR2(255) NOT NULL,
  SUBMITTED_DATE TIMESTAMP(6),
  TYPE VARCHAR2(255) NOT NULL,
  FORM_SET_ID NUMBER(19) NOT NULL,
  INDEX_ID NUMBER(19),
  TRACKING_NUMBER VARCHAR2(255) NOT NULL,
  SOURCE VARCHAR2(255) DEFAULT 'Electronic' NOT NULL,
  ACTIVE_RECORD VARCHAR2(1) DEFAULT 'Y' NOT NULL,
  PHASE VARCHAR2(255) DEFAULT 'New' NOT NULL,
  CONSTRAINT FKKS4MJ34UGCL64YG0I98GHXE7G FOREIGN KEY (FORM_SET_ID) REFERENCES CGP_NOI_FORM_SETS (ID),
  CONSTRAINT FK634MKVVMBAWD0K73IBVCX1W0S FOREIGN KEY (INDEX_ID) REFERENCES CGP_NOI_FORM_DATA_INDEX (ID)
);
CREATE INDEX IDX_FORMS_FORMSETS_FK ON CGP_NOI_FORMS (FORM_SET_ID);
CREATE INDEX IDX_FORMS_INDEX_FK ON CGP_NOI_FORMS (INDEX_ID);

CREATE TABLE CGP_NOI_FORM_ATTACHMENTS
(
  ID NUMBER(19) PRIMARY KEY NOT NULL,
  CATEGORY VARCHAR2(255) NOT NULL,
  CREATED_DATE TIMESTAMP(6) NOT NULL,
  CROMERR_ATTACHMENT_ID VARCHAR2(255),
  NAME VARCHAR2(255) NOT NULL,
  FORM_ID NUMBER(19) NOT NULL,
  DATA BLOB,
  ATTACHMENT_SIZE NUMBER(19),
  CONSTRAINT FK6BX23RS1278X5YU7KXL7QQY7Y FOREIGN KEY (FORM_ID) REFERENCES CGP_NOI_FORMS (ID)
);
CREATE INDEX IDX_ATTACHMENTS_FORMS_FK ON CGP_NOI_FORM_ATTACHMENTS (FORM_ID);

CREATE TABLE CGP_SERVICE_EVENT
(
  ID NUMBER(19) PRIMARY KEY NOT NULL,
  CREATED_DATE TIMESTAMP(6) NOT NULL,
  ERROR_CODE VARCHAR2(255),
  ERROR_MESSAGE VARCHAR2(4000),
  METHOD VARCHAR2(255) NOT NULL,
  SERVICE VARCHAR2(255) NOT NULL,
  STATUS VARCHAR2(255) NOT NULL,
  USER_ID VARCHAR2(255) NOT NULL
);

CREATE TABLE CGP_REF_BIA_TRIBES
(
  ID NUMBER(19) PRIMARY KEY NOT NULL,
  STATE_CODE VARCHAR2(2) NOT NULL,
  TRIBE_NAME VARCHAR2(400) NOT NULL
);
CREATE INDEX IDX_BIA_TRIBES ON CGP_REF_BIA_TRIBES (STATE_CODE);

CREATE TABLE CGP_REF_CHEMICALS
(
  ID NUMBER(19) PRIMARY KEY NOT NULL,
  POLLUTANT_DESC VARCHAR2(4000) NOT NULL,
  SRS_ID VARCHAR2(255),
  POLLUTANT_CATEGORY_CODE VARCHAR2(255),
  CHEMICAL_FORMULA VARCHAR2(255),
  CHEMICAL_ABSTRACT_SERVICE_NMBR VARCHAR2(255),
  STATUS_FLAG VARCHAR2(1),
  SRS_SYSTEMATIC_NAME VARCHAR2(4000)
);
CREATE INDEX IDX_CHEMICALS ON CGP_REF_CHEMICALS (POLLUTANT_DESC);

CREATE TABLE CGP_REF_COUNTIES
(
  ID NUMBER(*) PRIMARY KEY NOT NULL,
  STATE_CODE VARCHAR2(2) NOT NULL,
  COUNTY_NAME VARCHAR2(255) NOT NULL
);
CREATE INDEX IDX_COUNTIES ON CGP_REF_COUNTIES (STATE_CODE);

CREATE TABLE CGP_REF_MGP
(
  ID NUMBER(19) PRIMARY KEY NOT NULL,
  FED_FAC_ELIGIBLE CHAR(1) NOT NULL,
  IND_COUNTRY_MGP_NUMBER VARCHAR2(255),
  MGP_NUMBER VARCHAR2(255),
  NON_FED_FAC_ELIGIBLE CHAR(1) NOT NULL,
  REGION_CODE VARCHAR2(2) NOT NULL,
  STATE_CODE VARCHAR2(2) NOT NULL
);
CREATE INDEX IDX_MGP_RULES ON CGP_REF_MGP (STATE_CODE);

CREATE TABLE CGP_REF_NPDES_SEQ
(
  ID NUMBER(19) PRIMARY KEY NOT NULL,
  MGP_NUM VARCHAR2(9) NOT NULL,
  NPDES_ALPHA_START VARCHAR2(3) NOT NULL
);
CREATE INDEX IDX_NPDES_SEQ ON CGP_REF_NPDES_SEQ (MGP_NUM);

CREATE TABLE CGP_REF_POLLUTANTS
(
  ID NUMBER(19) PRIMARY KEY NOT NULL,
  POLLUTANT_CODE NUMBER(10) NOT NULL,
  POLLUTANT_NAME VARCHAR2(255) NOT NULL,
  POLLUTANT_SRS_NAME VARCHAR2(4000)
);
CREATE INDEX IDX_POLLUTANTS ON CGP_REF_POLLUTANTS (POLLUTANT_NAME, POLLUTANT_SRS_NAME);

CREATE TABLE CGP_REF_STATES
(
  ID NUMBER(19) PRIMARY KEY NOT NULL,
  REGION_CODE VARCHAR2(2),
  STATE_CODE VARCHAR2(2) NOT NULL,
  STATE_NAME VARCHAR2(255) NOT NULL,
  STATE_USAGE VARCHAR2(1),
  STATE_FED_OPERATOR_TEXT VARCHAR2(4000)
);
CREATE UNIQUE INDEX UK_89EV33UJSVEVFLKKN07SHF8GB ON CGP_REF_STATES (STATE_CODE);
CREATE INDEX IDX_STATE_USAGE ON CGP_REF_STATES (STATE_USAGE);

CREATE TABLE CGP_REF_TRIBAL_OVERRIDES
(
  ID NUMBER(19) PRIMARY KEY NOT NULL,
  MGP_NUMBER VARCHAR2(255),
  STATE_CODE VARCHAR2(2) NOT NULL,
  TRIBAL_CODE VARCHAR2(255) NOT NULL
);
CREATE INDEX IDX_OVERRIDES ON CGP_REF_TRIBAL_OVERRIDES (TRIBAL_CODE, STATE_CODE);

CREATE TABLE CGP_REF_TRIBE_STATES
(
  TRIBAL_CODE VARCHAR2(255) NOT NULL,
  STATE_CODE VARCHAR2(2) NOT NULL
);
CREATE UNIQUE INDEX IDX_TRIBAL_STATE ON CGP_REF_TRIBE_STATES (TRIBAL_CODE, STATE_CODE);

CREATE TABLE CGP_REF_TRIBES
(
  ID NUMBER(19) PRIMARY KEY NOT NULL,
  TRIBAL_CODE VARCHAR2(255) NOT NULL,
  TRIBAL_NAME VARCHAR2(255) NOT NULL
);
CREATE INDEX IDX_TRIBES ON CGP_REF_TRIBES (TRIBAL_CODE);



-- A hint submitted by a user: Oracle DB MUST be created as "shared" and the
-- job_queue_processes parameter  must be greater than 2
-- However, these settings are pretty much standard after any
-- Oracle install, so most users need not worry about this.
--
-- Many other users (including the primary author of Quartz) have had success
-- runing in dedicated mode, so only consider the above as a hint ;-)
--
CREATE TABLE qrtz_job_details
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    JOB_NAME  VARCHAR2(200) NOT NULL,
    JOB_GROUP VARCHAR2(200) NOT NULL,
    DESCRIPTION VARCHAR2(250) NULL,
    JOB_CLASS_NAME   VARCHAR2(250) NOT NULL,
    IS_DURABLE VARCHAR2(1) NOT NULL,
    IS_NONCONCURRENT VARCHAR2(1) NOT NULL,
    IS_UPDATE_DATA VARCHAR2(1) NOT NULL,
    REQUESTS_RECOVERY VARCHAR2(1) NOT NULL,
    JOB_DATA BLOB NULL,
    CONSTRAINT QRTZ_JOB_DETAILS_PK PRIMARY KEY (SCHED_NAME,JOB_NAME,JOB_GROUP)
);
CREATE TABLE qrtz_triggers
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    JOB_NAME  VARCHAR2(200) NOT NULL,
    JOB_GROUP VARCHAR2(200) NOT NULL,
    DESCRIPTION VARCHAR2(250) NULL,
    NEXT_FIRE_TIME NUMBER(13) NULL,
    PREV_FIRE_TIME NUMBER(13) NULL,
    PRIORITY NUMBER(13) NULL,
    TRIGGER_STATE VARCHAR2(16) NOT NULL,
    TRIGGER_TYPE VARCHAR2(8) NOT NULL,
    START_TIME NUMBER(13) NOT NULL,
    END_TIME NUMBER(13) NULL,
    CALENDAR_NAME VARCHAR2(200) NULL,
    MISFIRE_INSTR NUMBER(2) NULL,
    JOB_DATA BLOB NULL,
    CONSTRAINT QRTZ_TRIGGERS_PK PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    CONSTRAINT QRTZ_TRIGGER_TO_JOBS_FK FOREIGN KEY (SCHED_NAME,JOB_NAME,JOB_GROUP)
      REFERENCES QRTZ_JOB_DETAILS(SCHED_NAME,JOB_NAME,JOB_GROUP)
);
CREATE TABLE qrtz_simple_triggers
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    REPEAT_COUNT NUMBER(7) NOT NULL,
    REPEAT_INTERVAL NUMBER(12) NOT NULL,
    TIMES_TRIGGERED NUMBER(10) NOT NULL,
    CONSTRAINT QRTZ_SIMPLE_TRIG_PK PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    CONSTRAINT QRTZ_SIMPLE_TRIG_TO_TRIG_FK FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
	REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
);
CREATE TABLE qrtz_cron_triggers
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    CRON_EXPRESSION VARCHAR2(120) NOT NULL,
    TIME_ZONE_ID VARCHAR2(80),
    CONSTRAINT QRTZ_CRON_TRIG_PK PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    CONSTRAINT QRTZ_CRON_TRIG_TO_TRIG_FK FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
      REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
);
CREATE TABLE qrtz_simprop_triggers
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    STR_PROP_1 VARCHAR2(512) NULL,
    STR_PROP_2 VARCHAR2(512) NULL,
    STR_PROP_3 VARCHAR2(512) NULL,
    INT_PROP_1 NUMBER(10) NULL,
    INT_PROP_2 NUMBER(10) NULL,
    LONG_PROP_1 NUMBER(13) NULL,
    LONG_PROP_2 NUMBER(13) NULL,
    DEC_PROP_1 NUMERIC(13,4) NULL,
    DEC_PROP_2 NUMERIC(13,4) NULL,
    BOOL_PROP_1 VARCHAR2(1) NULL,
    BOOL_PROP_2 VARCHAR2(1) NULL,
    CONSTRAINT QRTZ_SIMPROP_TRIG_PK PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    CONSTRAINT QRTZ_SIMPROP_TRIG_TO_TRIG_FK FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
      REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
);
CREATE TABLE qrtz_blob_triggers
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    BLOB_DATA BLOB NULL,
    CONSTRAINT QRTZ_BLOB_TRIG_PK PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    CONSTRAINT QRTZ_BLOB_TRIG_TO_TRIG_FK FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
);
CREATE TABLE qrtz_calendars
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    CALENDAR_NAME  VARCHAR2(200) NOT NULL,
    CALENDAR BLOB NOT NULL,
    CONSTRAINT QRTZ_CALENDARS_PK PRIMARY KEY (SCHED_NAME,CALENDAR_NAME)
);
CREATE TABLE qrtz_paused_trigger_grps
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    TRIGGER_GROUP  VARCHAR2(200) NOT NULL,
    CONSTRAINT QRTZ_PAUSED_TRIG_GRPS_PK PRIMARY KEY (SCHED_NAME,TRIGGER_GROUP)
);
CREATE TABLE qrtz_fired_triggers
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    ENTRY_ID VARCHAR2(95) NOT NULL,
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    INSTANCE_NAME VARCHAR2(200) NOT NULL,
    FIRED_TIME NUMBER(13) NOT NULL,
    SCHED_TIME NUMBER(13) NOT NULL,
    PRIORITY NUMBER(13) NOT NULL,
    STATE VARCHAR2(16) NOT NULL,
    JOB_NAME VARCHAR2(200) NULL,
    JOB_GROUP VARCHAR2(200) NULL,
    IS_NONCONCURRENT VARCHAR2(1) NULL,
    REQUESTS_RECOVERY VARCHAR2(1) NULL,
    CONSTRAINT QRTZ_FIRED_TRIGGER_PK PRIMARY KEY (SCHED_NAME,ENTRY_ID)
);
CREATE TABLE qrtz_scheduler_state
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    INSTANCE_NAME VARCHAR2(200) NOT NULL,
    LAST_CHECKIN_TIME NUMBER(13) NOT NULL,
    CHECKIN_INTERVAL NUMBER(13) NOT NULL,
    CONSTRAINT QRTZ_SCHEDULER_STATE_PK PRIMARY KEY (SCHED_NAME,INSTANCE_NAME)
);
CREATE TABLE qrtz_locks
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    LOCK_NAME  VARCHAR2(40) NOT NULL,
    CONSTRAINT QRTZ_LOCKS_PK PRIMARY KEY (SCHED_NAME,LOCK_NAME)
);

create index idx_qrtz_j_req_recovery on qrtz_job_details(SCHED_NAME,REQUESTS_RECOVERY);
create index idx_qrtz_j_grp on qrtz_job_details(SCHED_NAME,JOB_GROUP);

create index idx_qrtz_t_j on qrtz_triggers(SCHED_NAME,JOB_NAME,JOB_GROUP);
create index idx_qrtz_t_jg on qrtz_triggers(SCHED_NAME,JOB_GROUP);
create index idx_qrtz_t_c on qrtz_triggers(SCHED_NAME,CALENDAR_NAME);
create index idx_qrtz_t_g on qrtz_triggers(SCHED_NAME,TRIGGER_GROUP);
create index idx_qrtz_t_state on qrtz_triggers(SCHED_NAME,TRIGGER_STATE);
create index idx_qrtz_t_n_state on qrtz_triggers(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_STATE);
create index idx_qrtz_t_n_g_state on qrtz_triggers(SCHED_NAME,TRIGGER_GROUP,TRIGGER_STATE);
create index idx_qrtz_t_next_fire_time on qrtz_triggers(SCHED_NAME,NEXT_FIRE_TIME);
create index idx_qrtz_t_nft_st on qrtz_triggers(SCHED_NAME,TRIGGER_STATE,NEXT_FIRE_TIME);
create index idx_qrtz_t_nft_misfire on qrtz_triggers(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME);
create index idx_qrtz_t_nft_st_misfire on qrtz_triggers(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_STATE);
create index idx_qrtz_t_nft_st_misfire_grp on qrtz_triggers(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_GROUP,TRIGGER_STATE);

create index idx_qrtz_ft_trig_inst_name on qrtz_fired_triggers(SCHED_NAME,INSTANCE_NAME);
create index idx_qrtz_ft_inst_job_req_rcvry on qrtz_fired_triggers(SCHED_NAME,INSTANCE_NAME,REQUESTS_RECOVERY);
create index idx_qrtz_ft_j_g on qrtz_fired_triggers(SCHED_NAME,JOB_NAME,JOB_GROUP);
create index idx_qrtz_ft_jg on qrtz_fired_triggers(SCHED_NAME,JOB_GROUP);
create index idx_qrtz_ft_t_g on qrtz_fired_triggers(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP);
create index idx_qrtz_ft_tg on qrtz_fired_triggers(SCHED_NAME,TRIGGER_GROUP);


